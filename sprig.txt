/*
First time? Check out the tutorial game:
https://sprig.hackclub.com/gallery/getting_started

@title: Tetris?
@author: Gautham Nair
@tags: []
@addedOn: 2024-00-00
*/
const White = "W";
const Black = "B"
const Grey = "G"
const Blue = "b"
const DBlue = "D"
const Orange = "O"
const Yellow = "Y"
const Green = "g"
const Purple = "P"
const Red = "R"

// Stick, L, L2, S, S2, Square, and Pyramid (order) 
var pieces = [[map`
.b
.b
.b
.b`, map`
....
bbbb`, map`
b.
b.
b.
b.`, map`
bbbb
....`], 
              [map`
.O.
.O.
.OO`, map`
...
OOO
O..`, map`
OO.
.O.
.O.`, map`
..O
OOO
...`], 
              [map`
.DD
.D.
.D.`, map`
...
DDD
..D`, map`
.D.
.D.
DD.`, map`
D..
DDD
...`], 
              [map`
.g.
.gg
..g`, map`
...
.gg
gg.`, map`
g..
gg.
.g.`, map`
.gg
gg.
...`],
              [map`
..R
.RR
.R.`, map`
...
RR.
.RR`, map`
.R.
RR.
R..`, map`
RR.
.RR
...`], 
              [map`
.YY
.YY
...`, map`
.YY
.YY
...`, map`
.YY
.YY
...`, map`
.YY
.YY
...`], 
              [map`
.P.
.PP
.P.`, map`
...
PPP
.P.`, map`
.P.
PP.
.P.`, map`
.P.
PPP
...`],]

var skirts = [[map`
..
..
..
.b`, map`
....
bbbb`, map`
..
..
..
b.`, map`
bbbb
....`], 
              [map`
...
...
.OO`, map`
...
.OO
O..`, map`
O..
...
.O.`, map`
...
OOO
...`], 
              [map`
..D
...
.D.`, map`
...
DD.
..D`, map`
...
...
DD.`, map`
...
DDD
...`], 
              [map`
...
.g.
..g`, map`
...
..g
gg.`, map`
...
g..
.g.`, map`
..g
gg.
...`],
              [map`
...
..R
.R.`, map`
...
R..
.RR`, map`
...
.R.
R..`, map`
R..
.RR
...`], 
              [map`
...
.YY
...`, map`...
.YY
...`, map`
...
.YY
...`, map`
...
.YY
...`], 
              [map`
...
..P
.P.`, map`
...
P.P
.P.`, map`
...
P..
.P.`, map`
...
PPP
...`],]

setLegend(
  [White, bitmap`
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222
2222222222222222`],
  [Black, bitmap`
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000
0000000000000000`],
  [Grey, bitmap`
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL
LLLLLLLLLLLLLLLL`],
  [Blue, bitmap`
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777
7777777777777777`],
  [DBlue, bitmap`
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555
5555555555555555`],
  [Orange, bitmap`
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999
9999999999999999`],
  [Yellow, bitmap`
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666
6666666666666666`],
  [Green, bitmap`
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444
4444444444444444`],
  [Purple, bitmap`
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH
HHHHHHHHHHHHHHHH`],
  [Red, bitmap`
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333`],
)

var gameOver = false;
var game = map`
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG
GGGGGGGGGG`
var gameState = map`
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........
..........`

function updateTile(x, y, newTile) {
  const rows = game.trim().split("\n"); // Trim excess spaces and split into rows
  const maxWidth = Math.max(...rows.map(row => row.length)); // Find the maximum row width

  // Update the specific tile at (x, y) with newTile
  let updatedRow = rows[y];
  // updatedRow = updatedRow.padEnd(maxWidth, ' '); // Pad the row to match maxWidth
  updatedRow = updatedRow.substring(0, x) + newTile + updatedRow.substring(x + 1);

  rows[y] = updatedRow;
  game = rows.join("\n");

  // Update the game display with the modified map
  setMap(game);
}

function updateTileState(x, y, newTile) {
  const rows = gameState.trim().split("\n"); // Trim excess spaces and split into rows
  const maxWidth = Math.max(...rows.map(row => row.length)); // Find the maximum row width

  // Update the specific tile at (x, y) with newTile
  let updatedRow = rows[y];
  updatedRow = updatedRow.padEnd(maxWidth, ' '); // Pad the row to match maxWidth
  updatedRow = updatedRow.substring(0, x) + newTile + updatedRow.substring(x + 1);

  rows[y] = updatedRow;
  gameState = rows.join("\n");

}

function getGameTile(x, y) {
  return game[(11*y)+x];
}

function getStateTile(x, y) {
  return gameState[(11*y)+x];
}

function addPiece(pieceNum) {
  var piece = pieces[pieceNum][3];
  var spawnY = 1;
  pieceRows = piece.trim().split("\n");
  if (pieceRows[0] === "..." || pieceRows[0] === "....") {
    spawnY -= 1;
  }
  var y = 0;
  for(row of pieceRows) {
    var x = 4;
    for(cell of row) {
      if (cell===".") {cell = "G"} 
      else {
        updateTileState(x, y, "p")
        if (getGameTile(x, y) != "G") {
          gameOver = true;
        }
      };
      updateTile(x, y, cell);
      x++;
    }
    y++;
  }
}

// updateTile(0, 0, "B");
addPiece(6);

function update() {
  let rowsRev = gameState.trim().split("\n").reverse();
  var y = 19;
  for(row of rowsRev.slice(0, rowsRev.length-1)) {
    for(var x=0;x<row.length;x++) {
      cell = row[x];
      cellAbove = getStateTile(x, y-1);
      if(cellAbove != "." && cellAbove != "\n") console.log(x, y);
      if(cell === "." && cellAbove != ".") {
        console.log(x, y, getStateTile(x, y-1), getStateTile(x, y));
        updateTileState(x, y, cellAbove);
        updateTileState(x, y-1, ".");
        console.log(x, y, getStateTile(x, y-1), getStateTile(x, y));
        updateTile(x, y, getGameTile(x, y-1));
        updateTile(x, y-1, "G");
      }
    }
    y--;
  }
}

console.log(gameState);
update();
// updateTile(7, 2, "P");
console.log(gameState);
setBackground(Black);

